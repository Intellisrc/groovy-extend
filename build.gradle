plugins {
    id 'groovy'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'net.saliman.properties' version '1.5.1'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

def groovyVer = '4.0.15'
def libVersion = '12'
group groupName
version "${groovyVer}.${libVersion}"
boolean isDev = version.contains("SNAPSHOT")
boolean publishDev = ! version.contains("DEBUG")

dependencies {
    // Use the latest Groovy version for building this library
    compileOnly "org.apache.groovy:groovy:${groovyVer}"

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:2.4-M1-groovy-4.0'
    testImplementation 'junit:junit:4.13.2'
}

java {
    if(!isDev || publishDev) {
        withJavadocJar()
        withSourcesJar()
    }
}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = isDev ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            groupId = groupName
            artifactId = artifact

            from components.java

            //version = version
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = projectName
                description = projectDescription
                url = projectURL
                inceptionYear = projectSince
                packaging = 'jar'
                licenses {
                    license {
                        name = 'GNU General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = authorId
                        name = authorName
                        email = authorEmail
                    }
                }
                scm {
                    url = projectURL
                    connection = "scm:git:${projectURL}.git"
                    developerConnection = "scm:git:${projectDevURL}"
                }
            }
        }
    }
}
/*
artifacts {
    archives jar, sourcesJar, javadocJar
}
*/
signing {
    //If we remove "artifacts" and set this one, it generates the jar, but without generateModule()
    if(! isDev || publishDev) {
        sign publishing.publications.mavenJava
    }
}

tasks.register('generateModule') {
    doLast {
        SourceSet main = sourceSets.main
        SourceDirectorySet groovy = main.groovy
        List<String> extensionFiles = []
        List<String> staticFiles = []
        groovy.toList().each {
            File g ->
                String pkg = g.absolutePath.replaceAll(File.separator, '.') -
                    groovy.srcDirs[0].toString().replaceAll(File.separator, '.')
                String clsName = pkg[1..pkg.lastIndexOf('.') - 1].toString()
                if (clsName.contains('Static')) {
                    staticFiles << clsName
                } else {
                    extensionFiles << clsName
                }
        }
        File services = new File(buildDir, "classes/groovy/main/META-INF/services")
        services.mkdirs()
        File ext = new File(services, 'org.codehaus.groovy.runtime.ExtensionModule')
        ext.text = """moduleName=groovy-common-extensions
moduleVersion=$version
extensionClasses=${extensionFiles.join(',')}
staticExtensionClasses=${staticFiles.join(',')}"""
    }
}
// Hook up dependencies
jar.dependsOn(generateModule)
/*jar.dependsOn(generateModule, sourcesJar, javadocJar)
   .finalizedBy(signArchives)*/

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}